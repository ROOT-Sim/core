/**
 * @file lib/config/reflect.h
 *
 * @brief Load a json file and populate a set of structs
 *
 * A set of structs annotated as configuration structs can be automatically filled by
 * this module. This significantly simplifies the configuration and initialization of
 * a simulation model.
 *
 * SPDX-FileCopyrightText: 2008-2021 HPDCS Group <rootsim@googlegroups.com>
 * SPDX-License-Identifier: GPL-3.0-only
 */
#pragma once

#include <lib/config/jsmn.h>
#include <stdbool.h>
#include <stdio.h>

#define _autoconf __attribute__((annotate("reflect")))

/**
 * @brief Describe a mapping from a JSON file to a C struct member
 *
 * This enum describes the set of elements that the reflection module can extract from a JSON file and inject
 * in a set of (nested) C structs. This should not be used directly, rather it's generated by the ROOT-Sim compiler.
 */
enum autoconf_types {
	AUTOCONF_INVALID, ///< Invalid metadata, also used to determine the end of an array of mappings
	AUTOCONF_UNSIGNED, ///< The corresponding struct member is an unsigned
	AUTOCONF_DOUBLE, ///< The corresponding struct member is a double
	AUTOCONF_BOOL, ///< The corresponding struct member is a boolean
	AUTOCONF_STRING, ///< The corresponding struct member is char *
	AUTOCONF_OBJECT, ///< The corresponding struct member is a pointer to another struct
	AUTOCONF_ARRAY_UNSIGNED, ///< The corresponding struct member is an array of unsigned
	AUTOCONF_ARRAY_DOUBLE, ///< The corresponding struct member is an array of double
	AUTOCONF_ARRAY_STRING, ///< The corresponding struct member is char **
	AUTOCONF_ARRAY_OBJECT ///< The corresponding struct member is struct **
};



/**
 * @brief Describe a mapping from a JSON file to a C struct
 *
 * This enum describes how the elements of a C struct should be populated starting from a JSON file.
 * This should not be used directly, rather it's generated by the ROOT-Sim compiler.
 */
struct autoconf_type_map {
	char *member; ///< The name of the member as in the JSON file and the struct
	size_t offset; ///< The offset in bytes from the top of the struct
	enum autoconf_types type; ///< How to convert the parsed element from the JSON file to the struct
	char *struct_name; ///< If pointing to objects (AUTOCONF_OBJECT or AUTOCONF_ARRAY_OBJECT), the name of the struct
	size_t struct_size; ///< If struct_name is not null, the size in bytes of the corresponding struct
};

/**
 * @brief Mapping between struct names and struct autoconf_type_map
 *
 * This structure is used to populate the main "dictionary" that is used by the reflection module to
 * populate C structs from JSON files.
 * This should not be used directly, rather it's generated by the ROOT-Sim compiler.
 */
struct autoconf_name_map {
	char *struct_name; ///< The name of the struct as a string (e.g. "struct conf")
	struct autoconf_type_map *members; ///< a struct autoconf_type_map describing the memebers of the struct
};

int load_json_from_string(void *struct_ptr, const char *json_string);

int load_json_from_file(void *struct_ptr, FILE *file);

int load_json_from_file_path(void *struct_ptr, const char *path);
