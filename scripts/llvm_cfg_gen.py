#!/usr/bin/env python3
# SPDX-FileCopyrightText: 2008-2021 HPDCS Group <rootsim@googlegroups.com>
# SPDX-License-Identifier: GPL-3.0-only
import re
import sys

instr_specs = {
    "to_substitute" : ["malloc", "free", "realloc", "calloc", "lp_id_get", "lib_ctx_get"],
    "substituted_suffix" : "_mt",
    "processed_suffix" : "_pr",
    "to_ignore" : ['_log_log']
}

def collection_to_c_array(coll, indent):
    indent_str = '\t' * indent
    res = '{\n'
    for s in coll:
        res += indent_str + f'"{s}",\n'
    res += indent_str + 'nullptr\n}'
    return res

def remove_comments(text):
    def replacer(match):
        s = match.group(0)
        if s.startswith('/'):
            return " " # note: a space and not an empty string
        else:
            return s

    pattern = re.compile(
        r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"',
        re.DOTALL | re.MULTILINE
    )
    return re.sub(pattern, replacer, text)

def extract_function_identifiers(text):
    text = remove_comments(text)
    fnc_ident_pattern = '([A-Z][0-9A-Za-z]*)([ \t\n\r\f\v]*\()'
    res = set()
    for match in re.finditer(fnc_ident_pattern, text):
        res.add(match.group(1))
    return res

copyright_str = '// file generated by a ROOT-Sim build script, all rights reserved\n'

if __name__ == '__main__':
    _, source_output = sys.argv

    with open(source_output, 'w') as f:
        f.write(copyright_str) # TODO do we need this?

        f.write('#include <instr/instr_llvm.hpp>\n\n')

        f.write('const char *const to_substitute[] = ')
        f.write(collection_to_c_array(instr_specs["to_substitute"], 1))
        f.write(';\n\n')

        f.write('const char *const to_ignore[] = ')
        f.write(collection_to_c_array(instr_specs["to_ignore"], 1))
        f.write(';\n\n')

        f.write('struct instr_cfg instr_cfg = {\n')
        f.write(f'\t"{instr_specs["processed_suffix"]}",\n')
        f.write(f'\t"{instr_specs["substituted_suffix"]}",\n')
        f.write('\tto_substitute,\n')
        f.write('\tto_ignore\n')
        f.write('};\n')
